/* automatically generated by rust-bindgen 0.70.1 */

#[derive(PartialEq, Copy, Clone, Hash, Debug, Default)]
#[repr(transparent)]
pub struct __BindgenFloat16(pub u16);
pub const __has_safe_buffers: u32 = 1;
pub const __DARWIN_ONLY_64_BIT_INO_T: u32 = 1;
pub const __DARWIN_ONLY_UNIX_CONFORMANCE: u32 = 1;
pub const __DARWIN_ONLY_VERS_1050: u32 = 1;
pub const __DARWIN_UNIX03: u32 = 1;
pub const __DARWIN_64_BIT_INO_T: u32 = 1;
pub const __DARWIN_VERS_1050: u32 = 1;
pub const __DARWIN_NON_CANCELABLE: u32 = 0;
pub const __DARWIN_SUF_EXTSN: &[u8; 14] = b"$DARWIN_EXTSN\0";
pub const __DARWIN_C_ANSI: u32 = 4096;
pub const __DARWIN_C_FULL: u32 = 900000;
pub const __DARWIN_C_LEVEL: u32 = 900000;
pub const __STDC_WANT_LIB_EXT1__: u32 = 1;
pub const __DARWIN_NO_LONG_LONG: u32 = 0;
pub const _DARWIN_FEATURE_64_BIT_INODE: u32 = 1;
pub const _DARWIN_FEATURE_ONLY_64_BIT_INODE: u32 = 1;
pub const _DARWIN_FEATURE_ONLY_VERS_1050: u32 = 1;
pub const _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE: u32 = 1;
pub const _DARWIN_FEATURE_UNIX_CONFORMANCE: u32 = 3;
pub const __has_ptrcheck: u32 = 0;
pub const __API_TO_BE_DEPRECATED: u32 = 100000;
pub const __API_TO_BE_DEPRECATED_MACOS: u32 = 100000;
pub const __API_TO_BE_DEPRECATED_IOS: u32 = 100000;
pub const __API_TO_BE_DEPRECATED_MACCATALYST: u32 = 100000;
pub const __API_TO_BE_DEPRECATED_WATCHOS: u32 = 100000;
pub const __API_TO_BE_DEPRECATED_TVOS: u32 = 100000;
pub const __API_TO_BE_DEPRECATED_DRIVERKIT: u32 = 100000;
pub const __API_TO_BE_DEPRECATED_VISIONOS: u32 = 100000;
pub const __MAC_10_0: u32 = 1000;
pub const __MAC_10_1: u32 = 1010;
pub const __MAC_10_2: u32 = 1020;
pub const __MAC_10_3: u32 = 1030;
pub const __MAC_10_4: u32 = 1040;
pub const __MAC_10_5: u32 = 1050;
pub const __MAC_10_6: u32 = 1060;
pub const __MAC_10_7: u32 = 1070;
pub const __MAC_10_8: u32 = 1080;
pub const __MAC_10_9: u32 = 1090;
pub const __MAC_10_10: u32 = 101000;
pub const __MAC_10_10_2: u32 = 101002;
pub const __MAC_10_10_3: u32 = 101003;
pub const __MAC_10_11: u32 = 101100;
pub const __MAC_10_11_2: u32 = 101102;
pub const __MAC_10_11_3: u32 = 101103;
pub const __MAC_10_11_4: u32 = 101104;
pub const __MAC_10_12: u32 = 101200;
pub const __MAC_10_12_1: u32 = 101201;
pub const __MAC_10_12_2: u32 = 101202;
pub const __MAC_10_12_4: u32 = 101204;
pub const __MAC_10_13: u32 = 101300;
pub const __MAC_10_13_1: u32 = 101301;
pub const __MAC_10_13_2: u32 = 101302;
pub const __MAC_10_13_4: u32 = 101304;
pub const __MAC_10_14: u32 = 101400;
pub const __MAC_10_14_1: u32 = 101401;
pub const __MAC_10_14_4: u32 = 101404;
pub const __MAC_10_14_5: u32 = 101405;
pub const __MAC_10_14_6: u32 = 101406;
pub const __MAC_10_15: u32 = 101500;
pub const __MAC_10_15_1: u32 = 101501;
pub const __MAC_10_15_4: u32 = 101504;
pub const __MAC_10_16: u32 = 101600;
pub const __MAC_11_0: u32 = 110000;
pub const __MAC_11_1: u32 = 110100;
pub const __MAC_11_3: u32 = 110300;
pub const __MAC_11_4: u32 = 110400;
pub const __MAC_11_5: u32 = 110500;
pub const __MAC_11_6: u32 = 110600;
pub const __MAC_12_0: u32 = 120000;
pub const __MAC_12_1: u32 = 120100;
pub const __MAC_12_2: u32 = 120200;
pub const __MAC_12_3: u32 = 120300;
pub const __MAC_12_4: u32 = 120400;
pub const __MAC_12_5: u32 = 120500;
pub const __MAC_12_6: u32 = 120600;
pub const __MAC_12_7: u32 = 120700;
pub const __MAC_13_0: u32 = 130000;
pub const __MAC_13_1: u32 = 130100;
pub const __MAC_13_2: u32 = 130200;
pub const __MAC_13_3: u32 = 130300;
pub const __MAC_13_4: u32 = 130400;
pub const __MAC_13_5: u32 = 130500;
pub const __MAC_13_6: u32 = 130600;
pub const __MAC_14_0: u32 = 140000;
pub const __MAC_14_1: u32 = 140100;
pub const __MAC_14_2: u32 = 140200;
pub const __MAC_14_3: u32 = 140300;
pub const __MAC_14_4: u32 = 140400;
pub const __MAC_14_5: u32 = 140500;
pub const __MAC_15_0: u32 = 150000;
pub const __MAC_15_1: u32 = 150100;
pub const __IPHONE_2_0: u32 = 20000;
pub const __IPHONE_2_1: u32 = 20100;
pub const __IPHONE_2_2: u32 = 20200;
pub const __IPHONE_3_0: u32 = 30000;
pub const __IPHONE_3_1: u32 = 30100;
pub const __IPHONE_3_2: u32 = 30200;
pub const __IPHONE_4_0: u32 = 40000;
pub const __IPHONE_4_1: u32 = 40100;
pub const __IPHONE_4_2: u32 = 40200;
pub const __IPHONE_4_3: u32 = 40300;
pub const __IPHONE_5_0: u32 = 50000;
pub const __IPHONE_5_1: u32 = 50100;
pub const __IPHONE_6_0: u32 = 60000;
pub const __IPHONE_6_1: u32 = 60100;
pub const __IPHONE_7_0: u32 = 70000;
pub const __IPHONE_7_1: u32 = 70100;
pub const __IPHONE_8_0: u32 = 80000;
pub const __IPHONE_8_1: u32 = 80100;
pub const __IPHONE_8_2: u32 = 80200;
pub const __IPHONE_8_3: u32 = 80300;
pub const __IPHONE_8_4: u32 = 80400;
pub const __IPHONE_9_0: u32 = 90000;
pub const __IPHONE_9_1: u32 = 90100;
pub const __IPHONE_9_2: u32 = 90200;
pub const __IPHONE_9_3: u32 = 90300;
pub const __IPHONE_10_0: u32 = 100000;
pub const __IPHONE_10_1: u32 = 100100;
pub const __IPHONE_10_2: u32 = 100200;
pub const __IPHONE_10_3: u32 = 100300;
pub const __IPHONE_11_0: u32 = 110000;
pub const __IPHONE_11_1: u32 = 110100;
pub const __IPHONE_11_2: u32 = 110200;
pub const __IPHONE_11_3: u32 = 110300;
pub const __IPHONE_11_4: u32 = 110400;
pub const __IPHONE_12_0: u32 = 120000;
pub const __IPHONE_12_1: u32 = 120100;
pub const __IPHONE_12_2: u32 = 120200;
pub const __IPHONE_12_3: u32 = 120300;
pub const __IPHONE_12_4: u32 = 120400;
pub const __IPHONE_13_0: u32 = 130000;
pub const __IPHONE_13_1: u32 = 130100;
pub const __IPHONE_13_2: u32 = 130200;
pub const __IPHONE_13_3: u32 = 130300;
pub const __IPHONE_13_4: u32 = 130400;
pub const __IPHONE_13_5: u32 = 130500;
pub const __IPHONE_13_6: u32 = 130600;
pub const __IPHONE_13_7: u32 = 130700;
pub const __IPHONE_14_0: u32 = 140000;
pub const __IPHONE_14_1: u32 = 140100;
pub const __IPHONE_14_2: u32 = 140200;
pub const __IPHONE_14_3: u32 = 140300;
pub const __IPHONE_14_5: u32 = 140500;
pub const __IPHONE_14_4: u32 = 140400;
pub const __IPHONE_14_6: u32 = 140600;
pub const __IPHONE_14_7: u32 = 140700;
pub const __IPHONE_14_8: u32 = 140800;
pub const __IPHONE_15_0: u32 = 150000;
pub const __IPHONE_15_1: u32 = 150100;
pub const __IPHONE_15_2: u32 = 150200;
pub const __IPHONE_15_3: u32 = 150300;
pub const __IPHONE_15_4: u32 = 150400;
pub const __IPHONE_15_5: u32 = 150500;
pub const __IPHONE_15_6: u32 = 150600;
pub const __IPHONE_15_7: u32 = 150700;
pub const __IPHONE_15_8: u32 = 150800;
pub const __IPHONE_16_0: u32 = 160000;
pub const __IPHONE_16_1: u32 = 160100;
pub const __IPHONE_16_2: u32 = 160200;
pub const __IPHONE_16_3: u32 = 160300;
pub const __IPHONE_16_4: u32 = 160400;
pub const __IPHONE_16_5: u32 = 160500;
pub const __IPHONE_16_6: u32 = 160600;
pub const __IPHONE_16_7: u32 = 160700;
pub const __IPHONE_17_0: u32 = 170000;
pub const __IPHONE_17_1: u32 = 170100;
pub const __IPHONE_17_2: u32 = 170200;
pub const __IPHONE_17_3: u32 = 170300;
pub const __IPHONE_17_4: u32 = 170400;
pub const __IPHONE_17_5: u32 = 170500;
pub const __IPHONE_18_0: u32 = 180000;
pub const __IPHONE_18_1: u32 = 180100;
pub const __WATCHOS_1_0: u32 = 10000;
pub const __WATCHOS_2_0: u32 = 20000;
pub const __WATCHOS_2_1: u32 = 20100;
pub const __WATCHOS_2_2: u32 = 20200;
pub const __WATCHOS_3_0: u32 = 30000;
pub const __WATCHOS_3_1: u32 = 30100;
pub const __WATCHOS_3_1_1: u32 = 30101;
pub const __WATCHOS_3_2: u32 = 30200;
pub const __WATCHOS_4_0: u32 = 40000;
pub const __WATCHOS_4_1: u32 = 40100;
pub const __WATCHOS_4_2: u32 = 40200;
pub const __WATCHOS_4_3: u32 = 40300;
pub const __WATCHOS_5_0: u32 = 50000;
pub const __WATCHOS_5_1: u32 = 50100;
pub const __WATCHOS_5_2: u32 = 50200;
pub const __WATCHOS_5_3: u32 = 50300;
pub const __WATCHOS_6_0: u32 = 60000;
pub const __WATCHOS_6_1: u32 = 60100;
pub const __WATCHOS_6_2: u32 = 60200;
pub const __WATCHOS_7_0: u32 = 70000;
pub const __WATCHOS_7_1: u32 = 70100;
pub const __WATCHOS_7_2: u32 = 70200;
pub const __WATCHOS_7_3: u32 = 70300;
pub const __WATCHOS_7_4: u32 = 70400;
pub const __WATCHOS_7_5: u32 = 70500;
pub const __WATCHOS_7_6: u32 = 70600;
pub const __WATCHOS_8_0: u32 = 80000;
pub const __WATCHOS_8_1: u32 = 80100;
pub const __WATCHOS_8_3: u32 = 80300;
pub const __WATCHOS_8_4: u32 = 80400;
pub const __WATCHOS_8_5: u32 = 80500;
pub const __WATCHOS_8_6: u32 = 80600;
pub const __WATCHOS_8_7: u32 = 80700;
pub const __WATCHOS_8_8: u32 = 80800;
pub const __WATCHOS_9_0: u32 = 90000;
pub const __WATCHOS_9_1: u32 = 90100;
pub const __WATCHOS_9_2: u32 = 90200;
pub const __WATCHOS_9_3: u32 = 90300;
pub const __WATCHOS_9_4: u32 = 90400;
pub const __WATCHOS_9_5: u32 = 90500;
pub const __WATCHOS_9_6: u32 = 90600;
pub const __WATCHOS_10_0: u32 = 100000;
pub const __WATCHOS_10_1: u32 = 100100;
pub const __WATCHOS_10_2: u32 = 100200;
pub const __WATCHOS_10_3: u32 = 100300;
pub const __WATCHOS_10_4: u32 = 100400;
pub const __WATCHOS_10_5: u32 = 100500;
pub const __WATCHOS_11_0: u32 = 110000;
pub const __WATCHOS_11_1: u32 = 110100;
pub const __TVOS_9_0: u32 = 90000;
pub const __TVOS_9_1: u32 = 90100;
pub const __TVOS_9_2: u32 = 90200;
pub const __TVOS_10_0: u32 = 100000;
pub const __TVOS_10_0_1: u32 = 100001;
pub const __TVOS_10_1: u32 = 100100;
pub const __TVOS_10_2: u32 = 100200;
pub const __TVOS_11_0: u32 = 110000;
pub const __TVOS_11_1: u32 = 110100;
pub const __TVOS_11_2: u32 = 110200;
pub const __TVOS_11_3: u32 = 110300;
pub const __TVOS_11_4: u32 = 110400;
pub const __TVOS_12_0: u32 = 120000;
pub const __TVOS_12_1: u32 = 120100;
pub const __TVOS_12_2: u32 = 120200;
pub const __TVOS_12_3: u32 = 120300;
pub const __TVOS_12_4: u32 = 120400;
pub const __TVOS_13_0: u32 = 130000;
pub const __TVOS_13_2: u32 = 130200;
pub const __TVOS_13_3: u32 = 130300;
pub const __TVOS_13_4: u32 = 130400;
pub const __TVOS_14_0: u32 = 140000;
pub const __TVOS_14_1: u32 = 140100;
pub const __TVOS_14_2: u32 = 140200;
pub const __TVOS_14_3: u32 = 140300;
pub const __TVOS_14_5: u32 = 140500;
pub const __TVOS_14_6: u32 = 140600;
pub const __TVOS_14_7: u32 = 140700;
pub const __TVOS_15_0: u32 = 150000;
pub const __TVOS_15_1: u32 = 150100;
pub const __TVOS_15_2: u32 = 150200;
pub const __TVOS_15_3: u32 = 150300;
pub const __TVOS_15_4: u32 = 150400;
pub const __TVOS_15_5: u32 = 150500;
pub const __TVOS_15_6: u32 = 150600;
pub const __TVOS_16_0: u32 = 160000;
pub const __TVOS_16_1: u32 = 160100;
pub const __TVOS_16_2: u32 = 160200;
pub const __TVOS_16_3: u32 = 160300;
pub const __TVOS_16_4: u32 = 160400;
pub const __TVOS_16_5: u32 = 160500;
pub const __TVOS_16_6: u32 = 160600;
pub const __TVOS_17_0: u32 = 170000;
pub const __TVOS_17_1: u32 = 170100;
pub const __TVOS_17_2: u32 = 170200;
pub const __TVOS_17_3: u32 = 170300;
pub const __TVOS_17_4: u32 = 170400;
pub const __TVOS_17_5: u32 = 170500;
pub const __TVOS_18_0: u32 = 180000;
pub const __TVOS_18_1: u32 = 180100;
pub const __BRIDGEOS_2_0: u32 = 20000;
pub const __BRIDGEOS_3_0: u32 = 30000;
pub const __BRIDGEOS_3_1: u32 = 30100;
pub const __BRIDGEOS_3_4: u32 = 30400;
pub const __BRIDGEOS_4_0: u32 = 40000;
pub const __BRIDGEOS_4_1: u32 = 40100;
pub const __BRIDGEOS_5_0: u32 = 50000;
pub const __BRIDGEOS_5_1: u32 = 50100;
pub const __BRIDGEOS_5_3: u32 = 50300;
pub const __BRIDGEOS_6_0: u32 = 60000;
pub const __BRIDGEOS_6_2: u32 = 60200;
pub const __BRIDGEOS_6_4: u32 = 60400;
pub const __BRIDGEOS_6_5: u32 = 60500;
pub const __BRIDGEOS_6_6: u32 = 60600;
pub const __BRIDGEOS_7_0: u32 = 70000;
pub const __BRIDGEOS_7_1: u32 = 70100;
pub const __BRIDGEOS_7_2: u32 = 70200;
pub const __BRIDGEOS_7_3: u32 = 70300;
pub const __BRIDGEOS_7_4: u32 = 70400;
pub const __BRIDGEOS_7_6: u32 = 70600;
pub const __BRIDGEOS_8_0: u32 = 80000;
pub const __BRIDGEOS_8_1: u32 = 80100;
pub const __BRIDGEOS_8_2: u32 = 80200;
pub const __BRIDGEOS_8_3: u32 = 80300;
pub const __BRIDGEOS_8_4: u32 = 80400;
pub const __BRIDGEOS_8_5: u32 = 80500;
pub const __BRIDGEOS_9_0: u32 = 90000;
pub const __BRIDGEOS_9_1: u32 = 90100;
pub const __DRIVERKIT_19_0: u32 = 190000;
pub const __DRIVERKIT_20_0: u32 = 200000;
pub const __DRIVERKIT_21_0: u32 = 210000;
pub const __DRIVERKIT_22_0: u32 = 220000;
pub const __DRIVERKIT_22_4: u32 = 220400;
pub const __DRIVERKIT_22_5: u32 = 220500;
pub const __DRIVERKIT_22_6: u32 = 220600;
pub const __DRIVERKIT_23_0: u32 = 230000;
pub const __DRIVERKIT_23_1: u32 = 230100;
pub const __DRIVERKIT_23_2: u32 = 230200;
pub const __DRIVERKIT_23_3: u32 = 230300;
pub const __DRIVERKIT_23_4: u32 = 230400;
pub const __DRIVERKIT_23_5: u32 = 230500;
pub const __DRIVERKIT_24_0: u32 = 240000;
pub const __DRIVERKIT_24_1: u32 = 240100;
pub const __VISIONOS_1_0: u32 = 10000;
pub const __VISIONOS_1_1: u32 = 10100;
pub const __VISIONOS_1_2: u32 = 10200;
pub const __VISIONOS_2_0: u32 = 20000;
pub const __VISIONOS_2_1: u32 = 20100;
pub const MAC_OS_X_VERSION_10_0: u32 = 1000;
pub const MAC_OS_X_VERSION_10_1: u32 = 1010;
pub const MAC_OS_X_VERSION_10_2: u32 = 1020;
pub const MAC_OS_X_VERSION_10_3: u32 = 1030;
pub const MAC_OS_X_VERSION_10_4: u32 = 1040;
pub const MAC_OS_X_VERSION_10_5: u32 = 1050;
pub const MAC_OS_X_VERSION_10_6: u32 = 1060;
pub const MAC_OS_X_VERSION_10_7: u32 = 1070;
pub const MAC_OS_X_VERSION_10_8: u32 = 1080;
pub const MAC_OS_X_VERSION_10_9: u32 = 1090;
pub const MAC_OS_X_VERSION_10_10: u32 = 101000;
pub const MAC_OS_X_VERSION_10_10_2: u32 = 101002;
pub const MAC_OS_X_VERSION_10_10_3: u32 = 101003;
pub const MAC_OS_X_VERSION_10_11: u32 = 101100;
pub const MAC_OS_X_VERSION_10_11_2: u32 = 101102;
pub const MAC_OS_X_VERSION_10_11_3: u32 = 101103;
pub const MAC_OS_X_VERSION_10_11_4: u32 = 101104;
pub const MAC_OS_X_VERSION_10_12: u32 = 101200;
pub const MAC_OS_X_VERSION_10_12_1: u32 = 101201;
pub const MAC_OS_X_VERSION_10_12_2: u32 = 101202;
pub const MAC_OS_X_VERSION_10_12_4: u32 = 101204;
pub const MAC_OS_X_VERSION_10_13: u32 = 101300;
pub const MAC_OS_X_VERSION_10_13_1: u32 = 101301;
pub const MAC_OS_X_VERSION_10_13_2: u32 = 101302;
pub const MAC_OS_X_VERSION_10_13_4: u32 = 101304;
pub const MAC_OS_X_VERSION_10_14: u32 = 101400;
pub const MAC_OS_X_VERSION_10_14_1: u32 = 101401;
pub const MAC_OS_X_VERSION_10_14_4: u32 = 101404;
pub const MAC_OS_X_VERSION_10_14_5: u32 = 101405;
pub const MAC_OS_X_VERSION_10_14_6: u32 = 101406;
pub const MAC_OS_X_VERSION_10_15: u32 = 101500;
pub const MAC_OS_X_VERSION_10_15_1: u32 = 101501;
pub const MAC_OS_X_VERSION_10_15_4: u32 = 101504;
pub const MAC_OS_X_VERSION_10_16: u32 = 101600;
pub const MAC_OS_VERSION_11_0: u32 = 110000;
pub const MAC_OS_VERSION_11_1: u32 = 110100;
pub const MAC_OS_VERSION_11_3: u32 = 110300;
pub const MAC_OS_VERSION_11_4: u32 = 110400;
pub const MAC_OS_VERSION_11_5: u32 = 110500;
pub const MAC_OS_VERSION_11_6: u32 = 110600;
pub const MAC_OS_VERSION_12_0: u32 = 120000;
pub const MAC_OS_VERSION_12_1: u32 = 120100;
pub const MAC_OS_VERSION_12_2: u32 = 120200;
pub const MAC_OS_VERSION_12_3: u32 = 120300;
pub const MAC_OS_VERSION_12_4: u32 = 120400;
pub const MAC_OS_VERSION_12_5: u32 = 120500;
pub const MAC_OS_VERSION_12_6: u32 = 120600;
pub const MAC_OS_VERSION_12_7: u32 = 120700;
pub const MAC_OS_VERSION_13_0: u32 = 130000;
pub const MAC_OS_VERSION_13_1: u32 = 130100;
pub const MAC_OS_VERSION_13_2: u32 = 130200;
pub const MAC_OS_VERSION_13_3: u32 = 130300;
pub const MAC_OS_VERSION_13_4: u32 = 130400;
pub const MAC_OS_VERSION_13_5: u32 = 130500;
pub const MAC_OS_VERSION_13_6: u32 = 130600;
pub const MAC_OS_VERSION_14_0: u32 = 140000;
pub const MAC_OS_VERSION_14_1: u32 = 140100;
pub const MAC_OS_VERSION_14_2: u32 = 140200;
pub const MAC_OS_VERSION_14_3: u32 = 140300;
pub const MAC_OS_VERSION_14_4: u32 = 140400;
pub const MAC_OS_VERSION_14_5: u32 = 140500;
pub const MAC_OS_VERSION_15_0: u32 = 150000;
pub const MAC_OS_VERSION_15_1: u32 = 150100;
pub const __MAC_OS_X_VERSION_MAX_ALLOWED: u32 = 150100;
pub const __ENABLE_LEGACY_MAC_AVAILABILITY: u32 = 1;
pub const FP_NAN: u32 = 1;
pub const FP_INFINITE: u32 = 2;
pub const FP_ZERO: u32 = 3;
pub const FP_NORMAL: u32 = 4;
pub const FP_SUBNORMAL: u32 = 5;
pub const FP_SUPERNORMAL: u32 = 6;
pub const FP_FAST_FMA: u32 = 1;
pub const FP_FAST_FMAF: u32 = 1;
pub const FP_FAST_FMAL: u32 = 1;
pub const FP_ILOGB0: i32 = -2147483648;
pub const FP_ILOGBNAN: i32 = -2147483648;
pub const MATH_ERRNO: u32 = 1;
pub const MATH_ERREXCEPT: u32 = 2;
pub const M_E: f64 = 2.718281828459045;
pub const M_LOG2E: f64 = 1.4426950408889634;
pub const M_LOG10E: f64 = 0.4342944819032518;
pub const M_LN2: f64 = 0.6931471805599453;
pub const M_LN10: f64 = 2.302585092994046;
pub const M_PI: f64 = 3.141592653589793;
pub const M_PI_2: f64 = 1.5707963267948966;
pub const M_PI_4: f64 = 0.7853981633974483;
pub const M_1_PI: f64 = 0.3183098861837907;
pub const M_2_PI: f64 = 0.6366197723675814;
pub const M_2_SQRTPI: f64 = 1.1283791670955126;
pub const M_SQRT2: f64 = 1.4142135623730951;
pub const M_SQRT1_2: f64 = 0.7071067811865476;
pub const FP_SNAN: u32 = 1;
pub const FP_QNAN: u32 = 1;
pub const DOMAIN: u32 = 1;
pub const SING: u32 = 2;
pub const OVERFLOW: u32 = 3;
pub const UNDERFLOW: u32 = 4;
pub const TLOSS: u32 = 5;
pub const PLOSS: u32 = 6;
pub type float_t = f32;
pub type double_t = f64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __float2 {
    pub __sinval: f32,
    pub __cosval: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __float2"][::std::mem::size_of::<__float2>() - 8usize];
    ["Alignment of __float2"][::std::mem::align_of::<__float2>() - 4usize];
    ["Offset of field: __float2::__sinval"][::std::mem::offset_of!(__float2, __sinval) - 0usize];
    ["Offset of field: __float2::__cosval"][::std::mem::offset_of!(__float2, __cosval) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __double2 {
    pub __sinval: f64,
    pub __cosval: f64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __double2"][::std::mem::size_of::<__double2>() - 16usize];
    ["Alignment of __double2"][::std::mem::align_of::<__double2>() - 8usize];
    ["Offset of field: __double2::__sinval"][::std::mem::offset_of!(__double2, __sinval) - 0usize];
    ["Offset of field: __double2::__cosval"][::std::mem::offset_of!(__double2, __cosval) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct exception {
    pub type_: ::std::os::raw::c_int,
    pub name: *mut ::std::os::raw::c_char,
    pub arg1: f64,
    pub arg2: f64,
    pub retval: f64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of exception"][::std::mem::size_of::<exception>() - 40usize];
    ["Alignment of exception"][::std::mem::align_of::<exception>() - 8usize];
    ["Offset of field: exception::type_"][::std::mem::offset_of!(exception, type_) - 0usize];
    ["Offset of field: exception::name"][::std::mem::offset_of!(exception, name) - 8usize];
    ["Offset of field: exception::arg1"][::std::mem::offset_of!(exception, arg1) - 16usize];
    ["Offset of field: exception::arg2"][::std::mem::offset_of!(exception, arg2) - 24usize];
    ["Offset of field: exception::retval"][::std::mem::offset_of!(exception, retval) - 32usize];
};
extern "C" {
    pub fn __math_errhandling() -> ::std::os::raw::c_int;
    pub fn __fpclassifyf(arg1: f32) -> ::std::os::raw::c_int;
    pub fn __fpclassifyd(arg1: f64) -> ::std::os::raw::c_int;
    pub fn __fpclassifyl(arg1: f64) -> ::std::os::raw::c_int;
    pub fn acosf(arg1: f32) -> f32;
    pub fn acos(arg1: f64) -> f64;
    pub fn acosl(arg1: f64) -> f64;
    pub fn asinf(arg1: f32) -> f32;
    pub fn asin(arg1: f64) -> f64;
    pub fn asinl(arg1: f64) -> f64;
    pub fn atanf(arg1: f32) -> f32;
    pub fn atan(arg1: f64) -> f64;
    pub fn atanl(arg1: f64) -> f64;
    pub fn atan2f(arg1: f32, arg2: f32) -> f32;
    pub fn atan2(arg1: f64, arg2: f64) -> f64;
    pub fn atan2l(arg1: f64, arg2: f64) -> f64;
    pub fn cosf(arg1: f32) -> f32;
    pub fn cos(arg1: f64) -> f64;
    pub fn cosl(arg1: f64) -> f64;
    pub fn sinf(arg1: f32) -> f32;
    pub fn sin(arg1: f64) -> f64;
    pub fn sinl(arg1: f64) -> f64;
    pub fn tanf(arg1: f32) -> f32;
    pub fn tan(arg1: f64) -> f64;
    pub fn tanl(arg1: f64) -> f64;
    pub fn acoshf(arg1: f32) -> f32;
    pub fn acosh(arg1: f64) -> f64;
    pub fn acoshl(arg1: f64) -> f64;
    pub fn asinhf(arg1: f32) -> f32;
    pub fn asinh(arg1: f64) -> f64;
    pub fn asinhl(arg1: f64) -> f64;
    pub fn atanhf(arg1: f32) -> f32;
    pub fn atanh(arg1: f64) -> f64;
    pub fn atanhl(arg1: f64) -> f64;
    pub fn coshf(arg1: f32) -> f32;
    pub fn cosh(arg1: f64) -> f64;
    pub fn coshl(arg1: f64) -> f64;
    pub fn sinhf(arg1: f32) -> f32;
    pub fn sinh(arg1: f64) -> f64;
    pub fn sinhl(arg1: f64) -> f64;
    pub fn tanhf(arg1: f32) -> f32;
    pub fn tanh(arg1: f64) -> f64;
    pub fn tanhl(arg1: f64) -> f64;
    pub fn expf(arg1: f32) -> f32;
    pub fn exp(arg1: f64) -> f64;
    pub fn expl(arg1: f64) -> f64;
    pub fn exp2f(arg1: f32) -> f32;
    pub fn exp2(arg1: f64) -> f64;
    pub fn exp2l(arg1: f64) -> f64;
    pub fn expm1f(arg1: f32) -> f32;
    pub fn expm1(arg1: f64) -> f64;
    pub fn expm1l(arg1: f64) -> f64;
    pub fn logf(arg1: f32) -> f32;
    pub fn log(arg1: f64) -> f64;
    pub fn logl(arg1: f64) -> f64;
    pub fn log10f(arg1: f32) -> f32;
    pub fn log10(arg1: f64) -> f64;
    pub fn log10l(arg1: f64) -> f64;
    pub fn log2f(arg1: f32) -> f32;
    pub fn log2(arg1: f64) -> f64;
    pub fn log2l(arg1: f64) -> f64;
    pub fn log1pf(arg1: f32) -> f32;
    pub fn log1p(arg1: f64) -> f64;
    pub fn log1pl(arg1: f64) -> f64;
    pub fn logbf(arg1: f32) -> f32;
    pub fn logb(arg1: f64) -> f64;
    pub fn logbl(arg1: f64) -> f64;
    pub fn modff(arg1: f32, arg2: *mut f32) -> f32;
    pub fn modf(arg1: f64, arg2: *mut f64) -> f64;
    pub fn modfl(arg1: f64, arg2: *mut f64) -> f64;
    pub fn ldexpf(arg1: f32, arg2: ::std::os::raw::c_int) -> f32;
    pub fn ldexp(arg1: f64, arg2: ::std::os::raw::c_int) -> f64;
    pub fn ldexpl(arg1: f64, arg2: ::std::os::raw::c_int) -> f64;
    pub fn frexpf(arg1: f32, arg2: *mut ::std::os::raw::c_int) -> f32;
    pub fn frexp(arg1: f64, arg2: *mut ::std::os::raw::c_int) -> f64;
    pub fn frexpl(arg1: f64, arg2: *mut ::std::os::raw::c_int) -> f64;
    pub fn ilogbf(arg1: f32) -> ::std::os::raw::c_int;
    pub fn ilogb(arg1: f64) -> ::std::os::raw::c_int;
    pub fn ilogbl(arg1: f64) -> ::std::os::raw::c_int;
    pub fn scalbnf(arg1: f32, arg2: ::std::os::raw::c_int) -> f32;
    pub fn scalbn(arg1: f64, arg2: ::std::os::raw::c_int) -> f64;
    pub fn scalbnl(arg1: f64, arg2: ::std::os::raw::c_int) -> f64;
    pub fn scalblnf(arg1: f32, arg2: ::std::os::raw::c_long) -> f32;
    pub fn scalbln(arg1: f64, arg2: ::std::os::raw::c_long) -> f64;
    pub fn scalblnl(arg1: f64, arg2: ::std::os::raw::c_long) -> f64;
    pub fn fabsf(arg1: f32) -> f32;
    pub fn fabs(arg1: f64) -> f64;
    pub fn fabsl(arg1: f64) -> f64;
    pub fn cbrtf(arg1: f32) -> f32;
    pub fn cbrt(arg1: f64) -> f64;
    pub fn cbrtl(arg1: f64) -> f64;
    pub fn hypotf(arg1: f32, arg2: f32) -> f32;
    pub fn hypot(arg1: f64, arg2: f64) -> f64;
    pub fn hypotl(arg1: f64, arg2: f64) -> f64;
    pub fn powf(arg1: f32, arg2: f32) -> f32;
    pub fn pow(arg1: f64, arg2: f64) -> f64;
    pub fn powl(arg1: f64, arg2: f64) -> f64;
    pub fn sqrtf(arg1: f32) -> f32;
    pub fn sqrt(arg1: f64) -> f64;
    pub fn sqrtl(arg1: f64) -> f64;
    pub fn erff(arg1: f32) -> f32;
    pub fn erf(arg1: f64) -> f64;
    pub fn erfl(arg1: f64) -> f64;
    pub fn erfcf(arg1: f32) -> f32;
    pub fn erfc(arg1: f64) -> f64;
    pub fn erfcl(arg1: f64) -> f64;
    pub fn lgammaf(arg1: f32) -> f32;
    pub fn lgamma(arg1: f64) -> f64;
    pub fn lgammal(arg1: f64) -> f64;
    pub fn tgammaf(arg1: f32) -> f32;
    pub fn tgamma(arg1: f64) -> f64;
    pub fn tgammal(arg1: f64) -> f64;
    pub fn ceilf(arg1: f32) -> f32;
    pub fn ceil(arg1: f64) -> f64;
    pub fn ceill(arg1: f64) -> f64;
    pub fn floorf(arg1: f32) -> f32;
    pub fn floor(arg1: f64) -> f64;
    pub fn floorl(arg1: f64) -> f64;
    pub fn nearbyintf(arg1: f32) -> f32;
    pub fn nearbyint(arg1: f64) -> f64;
    pub fn nearbyintl(arg1: f64) -> f64;
    pub fn rintf(arg1: f32) -> f32;
    pub fn rint(arg1: f64) -> f64;
    pub fn rintl(arg1: f64) -> f64;
    pub fn lrintf(arg1: f32) -> ::std::os::raw::c_long;
    pub fn lrint(arg1: f64) -> ::std::os::raw::c_long;
    pub fn lrintl(arg1: f64) -> ::std::os::raw::c_long;
    pub fn roundf(arg1: f32) -> f32;
    pub fn round(arg1: f64) -> f64;
    pub fn roundl(arg1: f64) -> f64;
    pub fn lroundf(arg1: f32) -> ::std::os::raw::c_long;
    pub fn lround(arg1: f64) -> ::std::os::raw::c_long;
    pub fn lroundl(arg1: f64) -> ::std::os::raw::c_long;
    pub fn llrintf(arg1: f32) -> ::std::os::raw::c_longlong;
    pub fn llrint(arg1: f64) -> ::std::os::raw::c_longlong;
    pub fn llrintl(arg1: f64) -> ::std::os::raw::c_longlong;
    pub fn llroundf(arg1: f32) -> ::std::os::raw::c_longlong;
    pub fn llround(arg1: f64) -> ::std::os::raw::c_longlong;
    pub fn llroundl(arg1: f64) -> ::std::os::raw::c_longlong;
    pub fn truncf(arg1: f32) -> f32;
    pub fn trunc(arg1: f64) -> f64;
    pub fn truncl(arg1: f64) -> f64;
    pub fn fmodf(arg1: f32, arg2: f32) -> f32;
    pub fn fmod(arg1: f64, arg2: f64) -> f64;
    pub fn fmodl(arg1: f64, arg2: f64) -> f64;
    pub fn remainderf(arg1: f32, arg2: f32) -> f32;
    pub fn remainder(arg1: f64, arg2: f64) -> f64;
    pub fn remainderl(arg1: f64, arg2: f64) -> f64;
    pub fn remquof(arg1: f32, arg2: f32, arg3: *mut ::std::os::raw::c_int) -> f32;
    pub fn remquo(arg1: f64, arg2: f64, arg3: *mut ::std::os::raw::c_int) -> f64;
    pub fn remquol(arg1: f64, arg2: f64, arg3: *mut ::std::os::raw::c_int) -> f64;
    pub fn copysignf(arg1: f32, arg2: f32) -> f32;
    pub fn copysign(arg1: f64, arg2: f64) -> f64;
    pub fn copysignl(arg1: f64, arg2: f64) -> f64;
    pub fn nanf(arg1: *const ::std::os::raw::c_char) -> f32;
    pub fn nan(arg1: *const ::std::os::raw::c_char) -> f64;
    pub fn nanl(arg1: *const ::std::os::raw::c_char) -> f64;
    pub fn nextafterf(arg1: f32, arg2: f32) -> f32;
    pub fn nextafter(arg1: f64, arg2: f64) -> f64;
    pub fn nextafterl(arg1: f64, arg2: f64) -> f64;
    pub fn nexttoward(arg1: f64, arg2: f64) -> f64;
    pub fn nexttowardf(arg1: f32, arg2: f64) -> f32;
    pub fn nexttowardl(arg1: f64, arg2: f64) -> f64;
    pub fn fdimf(arg1: f32, arg2: f32) -> f32;
    pub fn fdim(arg1: f64, arg2: f64) -> f64;
    pub fn fdiml(arg1: f64, arg2: f64) -> f64;
    pub fn fmaxf(arg1: f32, arg2: f32) -> f32;
    pub fn fmax(arg1: f64, arg2: f64) -> f64;
    pub fn fmaxl(arg1: f64, arg2: f64) -> f64;
    pub fn fminf(arg1: f32, arg2: f32) -> f32;
    pub fn fmin(arg1: f64, arg2: f64) -> f64;
    pub fn fminl(arg1: f64, arg2: f64) -> f64;
    pub fn fmaf(arg1: f32, arg2: f32, arg3: f32) -> f32;
    pub fn fma(arg1: f64, arg2: f64, arg3: f64) -> f64;
    pub fn fmal(arg1: f64, arg2: f64, arg3: f64) -> f64;
    pub fn __exp10f(arg1: f32) -> f32;
    pub fn __exp10(arg1: f64) -> f64;
    pub fn __cospif(arg1: f32) -> f32;
    pub fn __cospi(arg1: f64) -> f64;
    pub fn __sinpif(arg1: f32) -> f32;
    pub fn __sinpi(arg1: f64) -> f64;
    pub fn __tanpif(arg1: f32) -> f32;
    pub fn __tanpi(arg1: f64) -> f64;
    pub fn __fabsf16(arg1: __BindgenFloat16) -> __BindgenFloat16;
    pub fn __hypotf16(arg1: __BindgenFloat16, arg2: __BindgenFloat16) -> __BindgenFloat16;
    pub fn __sqrtf16(arg1: __BindgenFloat16) -> __BindgenFloat16;
    pub fn __ceilf16(arg1: __BindgenFloat16) -> __BindgenFloat16;
    pub fn __floorf16(arg1: __BindgenFloat16) -> __BindgenFloat16;
    pub fn __rintf16(arg1: __BindgenFloat16) -> __BindgenFloat16;
    pub fn __roundf16(arg1: __BindgenFloat16) -> __BindgenFloat16;
    pub fn __truncf16(arg1: __BindgenFloat16) -> __BindgenFloat16;
    pub fn __copysignf16(arg1: __BindgenFloat16, arg2: __BindgenFloat16) -> __BindgenFloat16;
    pub fn __nextafterf16(arg1: __BindgenFloat16, arg2: __BindgenFloat16) -> __BindgenFloat16;
    pub fn __fmaxf16(arg1: __BindgenFloat16, arg2: __BindgenFloat16) -> __BindgenFloat16;
    pub fn __fminf16(arg1: __BindgenFloat16, arg2: __BindgenFloat16) -> __BindgenFloat16;
    pub fn __fmaf16(
        arg1: __BindgenFloat16,
        arg2: __BindgenFloat16,
        arg3: __BindgenFloat16,
    ) -> __BindgenFloat16;
    pub fn __sincosf_stret(arg1: f32) -> __float2;
    pub fn __sincos_stret(arg1: f64) -> __double2;
    pub fn __sincospif_stret(arg1: f32) -> __float2;
    pub fn __sincospi_stret(arg1: f64) -> __double2;
    pub fn j0(arg1: f64) -> f64;
    pub fn j1(arg1: f64) -> f64;
    pub fn jn(arg1: ::std::os::raw::c_int, arg2: f64) -> f64;
    pub fn y0(arg1: f64) -> f64;
    pub fn y1(arg1: f64) -> f64;
    pub fn yn(arg1: ::std::os::raw::c_int, arg2: f64) -> f64;
    pub fn scalb(arg1: f64, arg2: f64) -> f64;
    pub static mut signgam: ::std::os::raw::c_int;
    pub static mut R_NaN: f64;
    pub static mut R_PosInf: f64;
    pub static mut R_NegInf: f64;
    pub static mut R_NaReal: f64;
    pub static mut R_NaInt: ::std::os::raw::c_int;
    pub fn R_IsNA(arg1: f64) -> ::std::os::raw::c_int;
    pub fn R_IsNaN(arg1: f64) -> ::std::os::raw::c_int;
    pub fn R_finite(arg1: f64) -> ::std::os::raw::c_int;
}
