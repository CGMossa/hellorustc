/* automatically generated by rust-bindgen 0.70.1 */

pub const SINGLESXP: u32 = 302;
pub type DL_FUNC = ::std::option::Option<unsafe extern "C" fn() -> *mut ::std::os::raw::c_void>;
pub type R_NativePrimitiveArgType = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct R_CMethodDef {
    pub name: *const ::std::os::raw::c_char,
    pub fun: DL_FUNC,
    pub numArgs: ::std::os::raw::c_int,
    pub types: *mut R_NativePrimitiveArgType,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of R_CMethodDef"][::std::mem::size_of::<R_CMethodDef>() - 32usize];
    ["Alignment of R_CMethodDef"][::std::mem::align_of::<R_CMethodDef>() - 8usize];
    ["Offset of field: R_CMethodDef::name"][::std::mem::offset_of!(R_CMethodDef, name) - 0usize];
    ["Offset of field: R_CMethodDef::fun"][::std::mem::offset_of!(R_CMethodDef, fun) - 8usize];
    ["Offset of field: R_CMethodDef::numArgs"]
        [::std::mem::offset_of!(R_CMethodDef, numArgs) - 16usize];
    ["Offset of field: R_CMethodDef::types"][::std::mem::offset_of!(R_CMethodDef, types) - 24usize];
};
pub type R_FortranMethodDef = R_CMethodDef;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct R_CallMethodDef {
    pub name: *const ::std::os::raw::c_char,
    pub fun: DL_FUNC,
    pub numArgs: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of R_CallMethodDef"][::std::mem::size_of::<R_CallMethodDef>() - 24usize];
    ["Alignment of R_CallMethodDef"][::std::mem::align_of::<R_CallMethodDef>() - 8usize];
    ["Offset of field: R_CallMethodDef::name"]
        [::std::mem::offset_of!(R_CallMethodDef, name) - 0usize];
    ["Offset of field: R_CallMethodDef::fun"]
        [::std::mem::offset_of!(R_CallMethodDef, fun) - 8usize];
    ["Offset of field: R_CallMethodDef::numArgs"]
        [::std::mem::offset_of!(R_CallMethodDef, numArgs) - 16usize];
};
pub type R_ExternalMethodDef = R_CallMethodDef;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _DllInfo {
    _unused: [u8; 0],
}
pub type DllInfo = _DllInfo;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Rf_RegisteredNativeSymbol {
    _unused: [u8; 0],
}
pub type R_RegisteredNativeSymbol = Rf_RegisteredNativeSymbol;
#[repr(u32)]
#[non_exhaustive]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum NativeSymbolType {
    R_ANY_SYM = 0,
    R_C_SYM = 1,
    R_CALL_SYM = 2,
    R_FORTRAN_SYM = 3,
    R_EXTERNAL_SYM = 4,
}
extern "C" {
    pub fn R_registerRoutines(
        info: *mut DllInfo,
        croutines: *const R_CMethodDef,
        callRoutines: *const R_CallMethodDef,
        fortranRoutines: *const R_FortranMethodDef,
        externalRoutines: *const R_ExternalMethodDef,
    ) -> ::std::os::raw::c_int;
    pub fn R_useDynamicSymbols(info: *mut DllInfo, value: Rboolean) -> Rboolean;
    pub fn R_forceSymbols(info: *mut DllInfo, value: Rboolean) -> Rboolean;
    pub fn R_getDllInfo(name: *const ::std::os::raw::c_char) -> *mut DllInfo;
    pub fn R_getEmbeddingDllInfo() -> *mut DllInfo;
    pub fn R_FindSymbol(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        symbol: *mut R_RegisteredNativeSymbol,
    ) -> DL_FUNC;
    pub fn R_RegisterCCallable(
        package: *const ::std::os::raw::c_char,
        name: *const ::std::os::raw::c_char,
        fptr: DL_FUNC,
    );
    pub fn R_GetCCallable(
        package: *const ::std::os::raw::c_char,
        name: *const ::std::os::raw::c_char,
    ) -> DL_FUNC;
}
