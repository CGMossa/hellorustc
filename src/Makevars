BINDINGS_DIR = bindings
all_r_headers = `find $(R_INCLUDE_DIR) -name '*.h'`
RUSTC = rustc
OBJECTS = rust_add.o hello.o

ifeq ($(R_OSTYPE),windows)
	RUSTC_DEFAULT_FLAGS = -Cembed-bitcode=no -Cdebuginfo=2
	TARGET = --target x86_64-pc-windows-gnu
	OS_DEFINES = -DWin32
	RUSTC_LINKER = -Clinker=x86_64-w64-mingw32.static.posix-gcc.exe
	LIBGCC_EH_RECIPE = `mkdir -p libgcc_mock && touch libgcc_mock/libgcc_eh.a`
	LIBGCC_EH_FLAG = -Llibgcc_mock
else 
	RUSTC_DEFAULT_FLAGS = -Cembed-bitcode=no -Cdebuginfo=2 -Csplit-debuginfo=unpacked
	TARGET =
	OS_DEFINES =
	RUSTC_LINKER =
	LIBGCC_EH_RECIPE =
	LIBGCC_EH_FLAG =
endif


RUSTC_FLAGS = \
	$(TARGET) \
	$(RUSTC_LINKER) \
	$(LIBGCC_EH_FLAG) \
	-L"$(R_HOME)/bin$(R_ARCH)" -lR \
	--edition=2021 \
	-Cpanic=abort \
	$(RUSTC_DEFAULT_FLAGS) \
	-Cllvm-args=--align-all-functions=64 \
	--crate-type=cdylib \
	--emit=dep-info,obj,link

# PKG_LIBS += -lc -lm -lresolv -ldl -lpthread  -dynamiclib -Wl,-dylib -shared -L. -lrust_add
# PKG_LIBS += -L. -lrust_add
# PKG_LIBS += -lc -lm "-Wl,-dead_strip" "-dynamiclib" "-Wl,-dylib" "-nodefaultlibs"

r_blocked_items = --blocklist-item="VECTOR_PTR|SEXPREC"
# TODO: use --override-abi=C-unwind if the current rustc supports it.. 
RUSTC_VERSION = `rustc --version`
bindgen_args = \
	--raw-line "/* OS: ${R_OSTYPE} */"  \
	--raw-line "/* Platform: $(R_PLATFORM) */" \
	--raw-line "/* $(RUSTC_VERSION) */" \
	--raw-line "/* R version: $(R_VERSION) */" \
	--enable-function-attribute-detection \
	--no-layout-tests \
	--sort-semantically --translate-enum-integer-types --merge-extern-blocks \
	--no-recursive-allowlist --rustified-non-exhaustive-enum=.* $(r_blocked_items)
bindgen_clang_args = -Denum_SEXPTYPE -DR_NO_REMAP -DSTRICT_R_HEADERS $(OS_DEFINES) \
 -Wno-visibility \
 -fparse-all-comments -DR_INTERFACE_PTRS \
 -include Rinternals.h -include R_ext/GraphicsEngine.h -include R_ext/GraphicsDevice.h

# TODO: unless `rust_analyzer_dummy` is added here, it won't do anything
all: LIBGCC_EH_RECIPE_SETUP $(SHLIB) $(OBJECTS) all_r_bindings

LIBGCC_EH_RECIPE_SETUP:
	@$(LIBGCC_EH_RECIPE)

all_r_bindings:
	@mkdir -p $(BINDINGS_DIR)
	@for header in $(all_r_headers); do \
		output=$(BINDINGS_DIR)/$$(echo $$header | sed "s|$(R_INCLUDE_DIR)/||;s|.h$$|.rs|"); \
		echo "Generating $$output from $$header"; \
		mkdir -p $$(dirname $$output); \
		bindgen "$$header" -o "$$output" $(bindgen_args) --allowlist-file $$header  -- -I$(R_INCLUDE_DIR) $(bindgen_clang_args); \
	done
	@echo "All bindings have been generated."

%.o: %.rs
		@$(RUSTC) $(RUSTC_FLAGS) --out-dir . $<

hello.o: hello.rs
rust_add.o: rust_add.rs

rust_analyzer_dummy: all_r_bindings
	mkdir -p dummy/bindings
	cp -r bindings/ dummy/bindings

# TODO: add nonapi = Rscript -e 'cat(tools:::nonAPI, sep = "\n")' | tr -d '\r' | sort -u | tee ./nonAPI.txt