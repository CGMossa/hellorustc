BINDINGS_DIR = bindings
all_r_headers = `find $(R_INCLUDE_DIR) -name '*.h'`
OBJECTS = rust_add.o
# OBJECTS = librust_add.a
# PKG_LIBS += -lc -lm -lresolv -ldl -lpthread  -dynamiclib -Wl,-dylib -shared -L. -lrust_add
# PKG_LIBS += -L. -lrust_add
# PKG_LIBS += -lc -lm "-Wl,-dead_strip" "-dynamiclib" "-Wl,-dylib" "-nodefaultlibs"

r_blocked_items = --blocklist-item="VECTOR_PTR|SEXPREC"
# TODO: use --override-abi=C-unwind if the current rustc supports it.. 
RUSTC_VERSION = `rustc --version`
bindgen_args = \
	--raw-line "/* OS: ${R_OSTYPE} */"  \
	--raw-line "/* Platform: r$(R_PLATFORM) */" \
	--raw-line "/* $(RUSTC_VERSION) */" \
	--raw-line "/* R version: $(R_VERSION) */" \
	--enable-function-attribute-detection \
	--no-layout-tests \
	--sort-semantically --translate-enum-integer-types --merge-extern-blocks \
	--no-recursive-allowlist --rustified-non-exhaustive-enum=.* $(r_blocked_items)
bindgen_clang_args = -Denum_SEXPTYPE -DR_NO_REMAP \
 -Wno-visibility \
 -fparse-all-comments -DR_INTERFACE_PTRS \
 -include Rinternals.h -include R_ext/GraphicsEngine.h -include R_ext/GraphicsDevice.h

# .PHONY: all all_r_bindings rust_add.o

# all: $(SHLIB) all_r_bindings rust_analyzer_dummy rust_add.o
all: $(SHLIB) $(OBJECTS) rust_add.o

all_r_bindings:
	@mkdir -p $(BINDINGS_DIR)
	@for header in $(all_r_headers); do \
		output=$(BINDINGS_DIR)/$$(echo $$header | sed "s|$(R_INCLUDE_DIR)/||;s|.h$$|.rs|"); \
		echo "Generating $$output from $$header"; \
		mkdir -p $$(dirname $$output); \
		bindgen "$$header" -o "$$output" $(bindgen_args) --allowlist-file $$header  -- -I$(R_INCLUDE_DIR) $(bindgen_clang_args); \
	done
	@echo "All bindings have been generated."


rust_add.o: rust_add.rs
	`rustc --edition=2021 \
	--print native-static-libs \
	-Cpanic=abort \
	-Cembed-bitcode=no -Cdebuginfo=2 -Csplit-debuginfo=unpacked \
	-Cllvm-args=--align-all-functions=64 \
	--target=aarch64-apple-darwin --crate-type=cdylib \
	--emit=dep-info,obj \
	--out-dir . \
	rust_add.rs`

rust_analyzer_dummy: all_r_bindings
	mkdir -p dummy/bindings
	cp -r bindings/ dummy/bindings

# TODO: add nonapi = Rscript -e 'cat(tools:::nonAPI, sep = "\n")' | tr -d '\r' | sort -u | tee ./nonAPI.txt